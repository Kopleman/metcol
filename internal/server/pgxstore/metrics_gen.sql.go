// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: metrics_gen.sql

package pgxstore

import (
	"context"
)

const createMetric = `-- name: CreateMetric :one
INSERT INTO metrics (name, type, value, delta, created_at)
	VALUES ($1, $2, $3, $4, now())
	RETURNING id, name, type, value, delta, created_at, updated_at, deleted_at
`

type CreateMetricParams struct {
	Name  string     `db:"name" json:"name"`
	Type  MetricType `db:"type" json:"type"`
	Value *float64   `db:"value" json:"value"`
	Delta *int64     `db:"delta" json:"delta"`
}

func (q *Queries) CreateMetric(ctx context.Context, arg CreateMetricParams) (*Metric, error) {
	row := q.db.QueryRow(ctx, createMetric,
		arg.Name,
		arg.Type,
		arg.Value,
		arg.Delta,
	)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Value,
		&i.Delta,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const existsMetric = `-- name: ExistsMetric :one
SELECT EXISTS (SELECT id, name, type, value, delta, created_at, updated_at, deleted_at FROM metrics WHERE name=$1 AND type=$2)::boolean
`

type ExistsMetricParams struct {
	Name string     `db:"name" json:"name"`
	Type MetricType `db:"type" json:"type"`
}

func (q *Queries) ExistsMetric(ctx context.Context, arg ExistsMetricParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsMetric, arg.Name, arg.Type)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
