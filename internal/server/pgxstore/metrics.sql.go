// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: metrics.sql

package pgxstore

import (
	"context"

	pgxstore "github.com/Kopleman/metcol/internal/server/pgxstore/models"
)

const GetAllMetrics = `-- name: GetAllMetrics :many
SELECT id, name, type, value, delta, created_at, updated_at, deleted_at FROM metrics ORDER BY name ASC
`

func (q *Queries) GetAllMetrics(ctx context.Context) ([]*pgxstore.Metric, error) {
	rows, err := q.db.Query(ctx, GetAllMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*pgxstore.Metric{}
	for rows.Next() {
		var i pgxstore.Metric
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Value,
			&i.Delta,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMetric = `-- name: GetMetric :one
SELECT id, name, type, value, delta, created_at, updated_at, deleted_at FROM metrics WHERE type=$1 AND name=$2 LIMIT 1
`

type GetMetricParams struct {
	Type pgxstore.MetricType `db:"type" json:"type"`
	Name string              `db:"name" json:"name"`
}

func (q *Queries) GetMetric(ctx context.Context, arg GetMetricParams) (*pgxstore.Metric, error) {
	row := q.db.QueryRow(ctx, GetMetric, arg.Type, arg.Name)
	var i pgxstore.Metric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Value,
		&i.Delta,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const UpdateMetric = `-- name: UpdateMetric :exec
UPDATE metrics
SET value=$1, delta=$2, updated_at=now()
WHERE type=$3 AND name=$4
    RETURNING id, name, type, value, delta, created_at, updated_at, deleted_at
`

type UpdateMetricParams struct {
	Value *float64            `db:"value" json:"value"`
	Delta *int64              `db:"delta" json:"delta"`
	Type  pgxstore.MetricType `db:"type" json:"type"`
	Name  string              `db:"name" json:"name"`
}

func (q *Queries) UpdateMetric(ctx context.Context, arg UpdateMetricParams) error {
	_, err := q.db.Exec(ctx, UpdateMetric,
		arg.Value,
		arg.Delta,
		arg.Type,
		arg.Name,
	)
	return err
}
