// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/routers/server.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/Kopleman/metcol/internal/common"
	dto "github.com/Kopleman/metcol/internal/common/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetAllValuesAsString mocks base method.
func (m *MockMetrics) GetAllValuesAsString() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValuesAsString")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValuesAsString indicates an expected call of GetAllValuesAsString.
func (mr *MockMetricsMockRecorder) GetAllValuesAsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValuesAsString", reflect.TypeOf((*MockMetrics)(nil).GetAllValuesAsString))
}

// GetMetricAsDTO mocks base method.
func (m *MockMetrics) GetMetricAsDTO(metricType common.MetricType, name string) (*dto.MetricDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricAsDTO", metricType, name)
	ret0, _ := ret[0].(*dto.MetricDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricAsDTO indicates an expected call of GetMetricAsDTO.
func (mr *MockMetricsMockRecorder) GetMetricAsDTO(metricType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricAsDTO", reflect.TypeOf((*MockMetrics)(nil).GetMetricAsDTO), metricType, name)
}

// GetValueAsString mocks base method.
func (m *MockMetrics) GetValueAsString(metricType common.MetricType, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueAsString", metricType, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueAsString indicates an expected call of GetValueAsString.
func (mr *MockMetricsMockRecorder) GetValueAsString(metricType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueAsString", reflect.TypeOf((*MockMetrics)(nil).GetValueAsString), metricType, name)
}

// SetMetric mocks base method.
func (m *MockMetrics) SetMetric(metricType common.MetricType, name, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetric", metricType, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetric indicates an expected call of SetMetric.
func (mr *MockMetricsMockRecorder) SetMetric(metricType, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetric", reflect.TypeOf((*MockMetrics)(nil).SetMetric), metricType, name, value)
}

// SetMetricByDto mocks base method.
func (m *MockMetrics) SetMetricByDto(metricDto *dto.MetricDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetricByDto", metricDto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetricByDto indicates an expected call of SetMetricByDto.
func (mr *MockMetricsMockRecorder) SetMetricByDto(metricDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricByDto", reflect.TypeOf((*MockMetrics)(nil).SetMetricByDto), metricDto)
}

// MockPgxPool is a mock of PgxPool interface.
type MockPgxPool struct {
	ctrl     *gomock.Controller
	recorder *MockPgxPoolMockRecorder
}

// MockPgxPoolMockRecorder is the mock recorder for MockPgxPool.
type MockPgxPoolMockRecorder struct {
	mock *MockPgxPool
}

// NewMockPgxPool creates a new mock instance.
func NewMockPgxPool(ctrl *gomock.Controller) *MockPgxPool {
	mock := &MockPgxPool{ctrl: ctrl}
	mock.recorder = &MockPgxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxPool) EXPECT() *MockPgxPoolMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPgxPool) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPgxPoolMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPgxPool)(nil).Ping), arg0)
}
